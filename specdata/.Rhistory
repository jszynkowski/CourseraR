nullOzoneData
data$Ozone
ozoneData = data$Ozone
ozoneData
class(ozoneData)
ozoneData[2]
is.na(ozoneData)
badOzone = is.na(ozoneData) == TRUE
badOzone
bad = ozoneData[badOzone]
bad
length(bad)
mean(ozoneData[!badOzone])
highOzone = data$Ozone[[Ozone>31]]
highOzone = data$Ozone[[data$Ozone>31]]
highOzone = ozoneData[ozoneData>31]
highOzone
goodOzone = ozoneData[!badOzone]
goodozone
goodOzone
complete.cases(data)
completeData = complete.cases(data)
completeData
highOzone = data$Ozone[[data$Ozone > 31]]
data2 = data[data$Ozone > 31, ]
View(data2)
data2 = data[completeData == TRUE,]
completeCases = data2
rm(completeCases)
data3 = data2[data2$Ozone > 31 & data2$Temp > 90, ]
mean(data3$Solar.R)
data4 = data2[data2$Month == 6, ]
mean(data4$Temp)
View(data2)
View(data2)
View(data4)
juneTemps = data4$Temps
juneTemps
juneTemps = data4$Temp
juneTemps
mean(juneTemp)
mean(juneTemps)
june = data[data$Month == 6, ]
june
mean(june$Temp)
max(june$Temp)
max(data$Ozone[data$Month == 5, ])
data$Ozone[data$Month == 5,]
may = [data$Month == 5, ]
may = data[data$Month == 5, ]
may
max(may$Ozone)
data[20:40, ]
data[20:25, ]
swirl()
library(swirl)
ls
ls()
rm(list="ls())
swirl
swirl()
library(swirl)
swirl()
getwd()
ls
ls()
x = 9
x <- 9
ls
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir  <- getwd()
dir.create(testdir)
dir.create()
args(dir.create)
dir.create(\testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mystest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest2.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", testdir3), recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5,10,length=30)
my_seq  <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
df  <- data.frame(name=NA, age=NA,)
df  <- data.frame(name=NA, age=NA)
View(df)
View(df)
df[1,2] <- "Josh"
View(df)
View(df)
df[2,1] <- "Josh"
View(df)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
complete("specdata", 1)
source('~/CourseraR/complete.R')
source('~/CourseraR/complete.R')
source('~/CourseraR/complete.R')
complete("specdata", 1)
complete("specdata", 1:10)
source('~/CourseraR/complete.R')
complete("specdata", 1:10)
complete("specdata", 1)
complete("specdata", c(2,3,8,10,12))
complete("specdata", 30:25
)
complete("specdata", 3)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
6
6
submit()
submit()
submit()
complete("specdata")
data <- complete("specdata")
data
sum(data[,2])
max(data[,2])
View(data)
str(data)
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
View(data)
data[1,2]
source('~/CourseraR/corr.R')
corr("specdata")
data&nobs
data[,2]
data[2,2]
data[2,2]>1000
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata")
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/complete.R')
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
suprathreshold <- corr("specdata")
str(suprathreshold)
source('~/CourseraR/corr.R')
suprathreshold <- corr("specdata")
source('~/.active-rstudio-document')
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata")
source('~/CourseraR/corr.R')
corr("specdata")
corr("specdata",1000)
length(suprathreshold[TRUE])
length(suprathreshold[suprathreshold==TRUE])
suprathreshold[suprathreshold==TRUE]
sum(suprathreshold, no.na=TRUE)
suprathreshold[3] <- TRUE
sum(suprathreshold, no.na=TRUE)
data[suprathreshold==TRUE]
data[,suprathreshold==TRUE]
data$id
data$id[which(suprathreshold==TRUE)]
source('~/CourseraR/corr.R')
corr(directory, 1000)
corr("specdata", 1000)
View(data)
rm(suprathreshold)
list.files("specdata")
list.files("specdata")[3]
source('~/CourseraR/corr.R')
corr("specdata", 1000)
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
x <- corr("specdata", 1000)
View(x)
View(x)
View(x)
is.na(x)
x[which(complete.cases(x))]
x[,which(complete.cases(x))]
x[which(complete.cases(x))==TRUE]
y = x[which(complete.cases(x))==TRUE]
View(y)
y = x[,which(complete.cases(x))==TRUE]
y = x[which(complete.cases(x))==TRUE,]
y = x$sulfate[which(complete.cases(x))==TRUE]
y = x$sulfate
y = x$sulfate
y=completecases(x)
complete.cases(x)
y = x$sulfate [which(complete.cases(x)==TRUE)]
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
x <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
y <- corr("specdata", 1000)
y
View(data)
x
suprathreshold[j] <- FALSE
corr  <- function(directory, threshold=0){
completecount <- complete(directory)
nstations <- nrow(completecount)
suprathreshold <- vector(mode="logical", length=nstations)
for (j in seq(nstations)){
#does the station meet the complete case threshold?
if (completecount[[j,2]] >= threshold){
suprathreshold[j] <- TRUE
}
else {
suprathreshold[j] <- FALSE
}
}
id <- completecount$id[which(suprathreshold==TRUE)]
filepath <- list.files(directory)[which(suprathreshold ==TRUE)]
data <- data.frame(Date=NA,nitrate=NA,sulfate=NA,ID=NA)
for (i in seq_along(filepath)){
data  <- rbind(data, read.csv(file = paste(directory, filepath[i], sep="/")))
}
nitrate <- data$nitrate[ which(complete.cases(x)==TRUE)]
print(nitrate)
sulfate <- data$sulfate[ which(complete.cases(x)==TRUE)]
print(sulfate)
}
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata",1000)
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
corr("specdata",1000)
report <- corr("specdata", 1000)
source('~/CourseraR/corr.R')
report <- corr("specdata", 1000)
summary(report)
report
head(report)
report <- corr("specdata", 5000)
summary(report)
str(report)
report <- corr("specdata", 100)
report <- corr("specdata", 150)
submit()
8
submit()
head(report)
source('~/CourseraR/corr.R')
report <- corr("specdata", 150)
report <- corr("specdata")
source('~/CourseraR/corr.R')
report <- corr("specdata")
summary(report)
source('~/CourseraR/corr.R')
source('~/CourseraR/corr.R')
report <- corr("specdata",1000)
report <- corr("specdata",400)
report
summary(report)
submit()
submit()
submit()
report <- corr("specdata",6000)
report <- corr("specdata",10000)
source('~/CourseraR/corr.R')
rm(report)
report <- corr("specdata",10000)
source('~/CourseraR/corr.R')
report <- corr("specdata",10000)
submit()
report
str(report)
source('~/CourseraR/corr.R')
report <- corr("specdata",10000)
source('~/CourseraR/corr.R')
report <- corr("specdata",10000)
submit()
source('~/CourseraR/Untitled.R')
cube(3)
source('~/CourseraR/Untitled.R')
cube()
search()
months()
print(months)
sys.time
Sys.time()
as.POSIXlt(Sys.time())
p <- as.POSIXlt(Sys.time())
p$sec
p$month
p$mon
p$yday
x <- Sys.time()
unclass(x)
as.POSIXlt(x)
Sys.time()
time <- Sys.time()
summary(time)
str(time)
unclass(time)
?unclass
class(time)
rm
rm*()
rm()
rm(all)
?rm()
?matrix
mat <- matrix(1:4, nrow=2, ncol=2)
mat
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(mat)
cacheSolve(mat)
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
makeCacheMatrix(mat)
cacheSolve(mat)
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
formals(makeCacheMatrix)
help($)
help(<<-)
help("$")
source('~/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(mat)
inv
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(mat)
vect <- 1:10
vect <- as.numeric(vect)
cachemean(vect)
source('~/CourseraR/test.R')
cachemean(vect)
x  <- makeVector()
cachemean(vect)
x$set(vect)
x$get()
cachemean(x)
cachemean(x)
str(x)
summary(x)
unclass(x)
mat <- matrix(1:4, nrow=2, ncol=2)
mat
x <- makeCacheMatrix()
source('~/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix()
x
x$set(mat)
cacheSolve(mat)
x$get()
x$getinverse
x$getinverse()
cacheSolve(mat)
source('~/.active-rstudio-document')
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
cacheSolve(mat)
invmat <- cacheSolve(mat)
mat*invmat
mat%*%invmat
source('~/ProgrammingAssignment2/cachematrix.R')
x$set(mat)
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] < time2["user.self"])
message("Solve time is less than cache time")
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
help(",,_")
help("<<-")
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
x$set(mat)
mat <- matrix(rnorm(1000))
View(mat)
mat <- matrix(rnorm(10000),100,100)
View(mat)
mat <- matrix(rnorm(1:10000),100,100)
source('~/ProgrammingAssignment2/cachematrix.R')
x=makeCacheMatrix()
x$set(mat)
x$get
x$get()
source('~/ProgrammingAssignment2/cachematrix.R')
x$get()
x=makeCacheMatrix()
x$get()
invmat <- cacheSolve(mat)
cacheSolve(mat)
invmat2 <- cacheSolve(mat)
invmat2 <- cacheSolve(invmat)
View(mat)
rm(invmat, invmat2, k, x)
source('~/ProgrammingAssignment2/cachematrix.R')
init(mat)
?sapply
files.list
list.files
x <- list(a=1:10, b = rnorm(10))
lapply(x, mean)
lapply(x, mean)
x <- list(a=1:10, b = rnorm(10))
lapply(x, mean)
files <- list.files("specdata")
files
lapply(files, mean)
lapply(files, read.csv)
setwd("~/CourseraR/specdata")
lapply(files, read.csv)
data <- lapply(files, read.csv)
data2 <- as.data.frame(data)
str(data)
summary(data)
data[1]
data[1]$sulfate
data[1][,1]
data2 <- data[1]
data2 <- data[[1]]
data2$nitrate
data2$nitrate which !is.na
data2$nitrate [which !is.na]
data2$nitrate [which is.na==FALSE]
data2$nitrate [which is.na(data2$nitrate==FALSE]
nitratemean = lapply(data, mean)
warnings()
